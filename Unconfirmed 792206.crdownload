# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZ_hmGshY7jse1w0lKNClHLUsxG5Flrx
"""

import numpy as np ## linear operations
import pandas as pd ##used for data preperation
import plotly.express as px ##used for data visualisation
from textblob import TextBlob #3used for sentiment analysis

df=pd.read_csv("netflix_titles.csv")

df

df.shape

df.head()

df.columns ##listing the columns available in the dataset

a=df.groupby(["rating"]).size().reset_index(name="counts")

print(a)

##plotting a pychart
piechart=px.pie(a,values="counts",names="rating",title="Distribution of content ratings on netflix")
piechart.show()

df["director"]=df["director"].fillna("Director not specified")##replacing nan values of director with the text director not specified"
df.head()

directors_list=pd.DataFrame()
print(directors_list)
##creating data frame with no rows and coloumns next we fill data into it

directors_list=df["director"].str.split(",",expand=True).stack()##seperates the directors by commaa and then using the stack function stacks it into a series
print(directors_list)

directors_list

print(type(directors_list))

directors_list.columns=["Director"]
print(directors_list)

directors = directors_list.groupby(["Director"]).size().reset_index(name="Total Count")
print(directors)

directors=directors[directors.Director !="Director not specified"]
directors

directors=directors.sort_values(by=["Total Count"],ascending=False)##sorting in the Total count coloumn using the sort_values command which sorts the values on the basis of the required parameter
print(directors)

topDirectors=directors.head()## taking the top 5 directors
topDirectors

barChart=px.bar(topDirectors,x="Total Count",y="Director",title="Top 5 Directors In NETFLIX")
barChart.show()

"""**Analysing the top 5 Actors/Actresses on NETFLIX**"""

df["cast"]=df["cast"].fillna("No cast specified")
cast_df=pd.DataFrame()
cast_df=df["cast"].str.split(",",expand=True).stack()
cast_df=cast_df.to_frame()
cast_df.columns=["Actor"]
actors=cast_df.groupby(["Actor"]).size().reset_index(name="Total Count")
actors=actors[actors.Actor!="No cast specified"]
actors=actors.sort_values(by=["Total Count"],ascending=False)
topActors=actors.head()
topActors=topActors.sort_values(by=['Total Count'])
barChart2=px.bar(topActors, x="Total Count",y="Actor",title ="Top 5 Actors on NETFLIX")
barChart2.show()

"""**ANALYZING THE CONTENT PRODUCED ON NETFLIX BASED ON YEARS**"""

df1=df[["type","release_year"]]
df1=df1.rename(columns={"release_year":"Release Year","type": "Type"})
df2 = df1.groupby(["Release Year", "Type"]).size().reset_index(name="Total Count")
print(df2)

df2=df2[df2["Release Year"]>=2000]
graph=px.line(df2,x="Release Year", y="Total Count",color="Type", title="Trend of Content Produced on NETFLIX Ever")
graph.show()

"""**SENTIMENT ANALYSIS OF NETFLIX CONTENT**"""

df3=df[["release_year","description"]]
df3=df3.rename(columns={"release_year":"Release Year", "description":"Description"})
for index,row in df3.iterrows():
  d=row["Description"]
  testimonal=TextBlob(d)
  p=testimonal.sentiment.polarity
  if p==0:
    sent="Neutral"
  elif p>0:
    sent="Positive"
  else:
    sent="Negative"
  df3.at[index,"Sentiment"]=sent
df3=df3.groupby(["Release Year", "Sentiment"]).size().reset_index(name="Total Count")
df3=df3[df3["Release Year"]>2005]
barGraph=px.bar(df3,x="Release Year", y="Total Count", color="Sentiment", title="SENTIMENT ANALYSIS OF THE CONTENT ON NETFLIX")
barGraph.show()

